"""Step-Audio2 TTS Engine implementation"""

import logging
from typing import List, Optional

from sglang.srt.tts.base_tts_engine import BaseTTSEngine
from sglang.srt.tts.step_audio2.token2wav import Token2wav

logger = logging.getLogger(__name__)


class StepAudio2TTS(BaseTTSEngine):
    """
    Step-Audio2 TTS Engine implementation.

    This class wraps the Token2wav model from Step-Audio2 and implements
    the BaseTTSEngine interface for integration with SGLang.
    """

    def __init__(self, model_path: str, float16: bool = False, **kwargs):
        """
        Initialize Step-Audio2 TTS Engine.

        Args:
            model_path: Path to the token2wav model directory
            float16: Whether to use float16 precision (default: False)
            **kwargs: Additional parameters
        """
        self.model_path = model_path
        self.float16 = float16
        self.token2wav = None
        self.load_model()
        logger.info(f"StepAudio2TTS initialized with model_path={model_path}")

    def load_model(self):
        """Load the Token2wav model into memory."""
        if self.token2wav is None:
            logger.info(f"Loading Token2wav model from {self.model_path}")
            self.token2wav = Token2wav(self.model_path, float16=self.float16)
            logger.info("Token2wav model loaded successfully")

    def unload_model(self):
        """Unload the Token2wav model to free memory."""
        if self.token2wav is not None:
            logger.info("Unloading Token2wav model")
            del self.token2wav
            self.token2wav = None
            # TODO: Add explicit GPU memory cleanup if needed
            logger.info("Token2wav model unloaded")

    def generate(
        self,
        audio_tokens: List[int],
        prompt_wav: Optional[str] = None,
        **kwargs
    ) -> bytes:
        """
        Generate audio from audio tokens.

        Args:
            audio_tokens: List of audio token IDs generated by the LLM
            prompt_wav: Optional path to prompt audio file for voice cloning
            **kwargs: Additional generation parameters

        Returns:
            bytes: Generated audio data in WAV format

        Raises:
            RuntimeError: If model is not loaded
        """
        if self.token2wav is None:
            raise RuntimeError("Token2wav model is not loaded. Call load_model() first.")

        if not audio_tokens:
            logger.warning("Empty audio_tokens provided, returning empty audio")
            return b""

        # TODO: Add validation for prompt_wav path
        # TODO: Add error handling for generation failures

        logger.debug(f"Generating audio from {len(audio_tokens)} tokens")

        try:
            # Call the Token2wav model
            audio_bytes = self.token2wav(audio_tokens, prompt_wav)
            logger.debug(f"Generated {len(audio_bytes)} bytes of audio")
            return audio_bytes
        except Exception as e:
            logger.error(f"Failed to generate audio: {e}")
            raise

    # TODO: Add streaming support
    # def generate_stream(self, audio_tokens: List[int], prompt_wav: Optional[str] = None):
    #     """Generate audio in streaming mode"""
    #     pass
